module UML2JAVA;
create OUT : JAVA from IN : UML;

helper context UML!ModelElement def: isPublic() : Boolean =
	self.visibility = 'public';

helper context UML!Class def: isAbstract() : Boolean =
	self.isAbstract;

helper context UML!Feature def: isStatic() : Boolean =
	self.ownerScope = 'static';

helper context UML!Attribute def: isFinal() : Boolean =
	self.changeability <> true;

helper context UML!Namespace def: getExtendedName() : String = self.name;

rule P2P {
	from e : UML!Package (e.oclIsTypeOf(UML!Package))
	to out : JAVA!Package (
		name <- e.getExtendedName()
	)
}

rule C2C {
	from e : UML!Class
	to out : JAVA!JavaClass (
		name <- e.name,
		isPublic <- e.isPublic(),
		isAbstract <- e.isAbstract(),
		package <- e.namespace
		)
}

rule D2P {
	from e : UML!DataType
	to out : JAVA!PrimitiveType (
		name <- e.name,
		package <- e.namespace
	)
}

rule A2F {
	from e : UML!Attribute
	to out : JAVA!Field (
		name <- e.name,
		isStatic <- e.isStatic(),
		isPublic <- e.isPublic(),
		isFinal <- e.isFinal(),
		owner <- e.owner,
		type <- e.type
	)
}

rule O2M {
	from e : UML!Operation
	to out : JAVA!Method (
		name <- e.name,
		isStatic <- e.isStatic(),
		isPublic <- e.isPublic(),
		owner <- e.owner
		
		
	)
}

rule P2F {
	from e : UML!Parameter (e.kind <> 'out')
	to out : JAVA!FeatureParameter (
		name <- e.name,
		type <- e.type,
		owner <- e.owner
	)
}


